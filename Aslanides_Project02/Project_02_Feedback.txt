PROJECT SCORE: 13.82 out of 15.00, or 92.16% * DESIGN DOCS - INITIAL (0.75 OUT OF 0.75): - Submitted and approved. * DESIGN DOCS - FINAL (0.69 OUT OF 0.75): - Class - CityListStats shouldn't need compareTo; we have no reason to sort these. Iterable has wrong data type; must be <E> as it's a generic, and shouldn't mention WeatherReading. Missing Comparable. Missing ArrayListIterator, which we wanted to show since we're learning all of this. - Object - WeatherReading[] should show top index of what the array will have grown to. * WEATHERREADING (1.49 OUT OF 1.50): - General - didn't need constructor; Java provides one anyway, you don't need to code it. If just to quiet down the IDE or Xlint, make it private perhaps? - Natural Ordering - good - Equals - could be streamlined; rely on compareTo == 0. * CITYLISTSTATS (0.75 OUT OF 0.75): - compareTo is nice; why not make the record implement Comparable<CityListStats> so Java will use it, e.g., in tests? * GWM - GENERAL (1.28 OUT OF 1.50): - Xlint - clean? Yes - Was supposed to throw FileNotFoundException in this project. There's no other good way to reject the File reference clients pass in via the constructor. Broke my compile (with my test code) and made me edit your code to start grading. - Constructor lacks precondition for null File reference. - Fails to close the file the constructor opens at #29. * GWM - GETCITYLISTSTATS (1.91 OUT OF 2.25): - Fails my test with an index out of bounds error; could lie in a get method, potentially. - Fails my complex test with the wrong number of readings returned; I expected 26, code returned 364. - Fails my precondition test. * GWM - GET METHODS (1.43 OUT OF 1.50): - Fails some precondition tests; could be more careful about indexes, counts, and combinations thereof. * GWM - ITERATOR (0.60 OUT OF 0.75): - Iterator works too hard; GWM doesn't own the data, you doesn't need to iterate over it by itself. The ArrayList owns the data and has this covered; leverage its iterator instead. * GWM - LINEAR REGRESSION (1.35 OUT OF 1.50): - Fails my getTemp test with significantly different result returned. * MAIN (0.75 OUT OF 0.75): - Looks good. * STYLE AND INTERNAL DOCUMENTATION (1.47 OUT OF 1.50): - JavaDocs - clean Xdoclint? Yes - JavaDocs - other - good - Other - imports *; shouldn't, per our Style Guide and many corporate style guides. * UNIT TESTS (1.36 OUT OF 1.50): - Line Coverage - 83% - Other - tests should not print; stackTraces are included in that. The test framework is the only thing that should be involved. Ask in class about how we might handle these. * OVERALL: - Good work on this project. While there are a few areas that are incomplete or do not meet requirements, the overall work is in good shape.